
" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
	syntax on
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'vundlevim/vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'		"Need for airline
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" Colorscheme and Airline
Plugin 'altercation/vim-colors-solarized'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Syntax Highlighting
"Plugin 'justinmk/vim-syntax-extra'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'stephpy/vim-yaml'
Plugin 'ekalinin/dockerfile.vim'

" Code Analysis and Syntax checking
"Plugin 'scrooloose/syntastic'
Plugin 'dense-analysis/ale'

" Auto-completions
"Plugin 'AutoComplPop'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Valloric/YouCompleteMe'

" tags and cscope
Plugin 'simplyzhao/cscope_maps.vim'

" Useful plugins
Plugin 'scrooloose/nerdtree'
Plugin 'MultipleSearch'

Plugin 'ctrlp.vim'
Plugin 'ack.vim'
"Plugin 'ervandew/supertab'

Plugin 'Raimondi/delimitMate'

"Plugin 'Yggdroot/indentLine'
"Plugin 'Indent-Guides'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

if &term =~ '^screen'
	" tmux knows the extended mouse mode
	set ttymouse=xterm2
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
endif

"=========== By elechole, jay-huh

"	map leader key. default: '\'
"let mapleader=','

noremap <leader>f ]}v[{zf
noremap <leader><leader> zf%

"The screen will not be redwawn while excuting macros
set lazyredraw

"Directories for swp Files
"set backupdir=~/.vim_backup
"set directory=~/.vim_backup

map ,noi :set noai<CR>:set nocindent<CR>:set nosmartindent<CR>
map ,sei :set ai<CR>:set cindent<CR>:set smartindent<CR>

imap	<silent>	<C-T><C-T> <C-R>=strftime("%Y-%m-%d %T")<CR>

"	Tab control in VIM
"	gt : tabnext
"	gT : tabprevious
nmap	tn		:tabnew<CR>
nmap	tc		:tabclose<CR>
nmap	<TAB>	:tabnext<CR>
nmap	tp		:tabprevious<CR>

"	Vim 256 Color setting
set t_Co=256
set t_AB=[48;5;%dm
set t_AF=[38;5;%dm

set nocompatible
set nu
set relativenumber
syntax on
set history=500
set nobackup
set noswapfile
set hlsearch	"	Highlighting Search results
set showmode
set tabstop=4
set softtabstop=0
set shiftwidth=4
"set expandtab	"	Tab 입력을 space로.. Tab입력은 CTRL-V + Tab
set noexpandtab
set cindent
set cinoptions=g0,0,l1,t0
set autoindent
set smartindent
set backspace=indent,eol,start
set visualbell		"	Alert 음을 화면 깜박임으로 바꿔보여주기
set ffs=unix,dos,mac
set report=0		"	Threshold for reporting number of lines changed.
set ruler			"	cursor 위치 항상 보이기
set statusline=%<%n:\ %t\ (%f)\ ascii=%b\ %=[%{&ff}:%{&fenc}]%h%r%w%y%m\ %-20(col:\ %c%V\ line:\ %l/%L%)\ (%P)	" 상태표시줄 포맷팅
set laststatus=2	"	statusline 항상 켜기
set scrolloff=5
set sidescrolloff=5
set selection=exclusive		"	커서 위치 문자 선택에 미포함.
set ttyfast
"set whichwrap=h,l,<,>,[,]
"set wildmode=longest:full,full

"set exrc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"set comments=sl:/*,mb:*,elx:*/
"	smartcase	소문자로 검색: 대소문자 구분없이 검색시
"				대문자 있으면: 대소문자 구분하여 검색

"set scs

"============= ctag config ==============
set tags+=tags
set tags+=/usr/include/tags

if filereadable( "/usr/include/cscope.out" )
	cs add /usr/include/cscope.out
endif

"let cwd=fnamemodify(getcwd(), ":p" )
"let g:adf_path=fnamemodify("~/work/gitlab/aosp-test/hardware/dogtra/adf7021", ":p")
"
"if isdirectory( g:adf_path )
"	"	if $ANDROID_BUILD_TOP !=""
"	let g:adf_tags = fnamemodify( findfile( "tags", g:adf_path ), ":p" )
"	let g:adf_cscope = fnamemodify( findfile( "cscope.out", g:adf_path ), ":p" )
"
"	if filereadable( g:adf_tags )
"		set tags+=~/work/gitlab/aosp-test/hardware/dogtra/adf7021/tags
"	endif
"	if filereadable( g:adf_cscope )
"		execute "cscope add" fnameescape( g:adf_cscope )
"	endif
"endif

"if has("autocmd")
	" When editing a file, always jump to the last cursor position
	"autocmd BufReadPost *
	"			\ if line("'\"") > 0 && line ("'\"") <= line("$") |
	"			\   exe "normal g'\"" |
	"			\ endif
"endif

"enable C++ line style comments
let c_cpp_comments = 0
"Do highlighting similarly to the C syntax file supplied with VIM
"let c_c_vim_compatible = 1
let c_gnu = 1
let c_C99 = 1
let c_syntax_for_h = 1

if has("gui_running")
	"set textwidth=80
	set guioptions-=T "remove Toolbar
	set guioptions+=b
	"set guioptions-=m "remove memu bar
	"set guioptions+=b "bottom scroll bar
	"set nowrap
	set wrap

	"set gfn=Courier\ New:h10
	map <A-SPACE> :simalt~x <CR>
	map <C-SPACE> :simalt~r <CR>

	winp 0 0
	win 130 50
	"set scrolloff=3
endif

"set gfn=LucidaSansTypewriter\ 9
"set gfn=D2Coding\ 12
set gfn=Ubuntu\ Mono\ 12
set fileencoding=utf-8
set fileencodings=utf-8,cp949,euc-kr

behave xterm

"set cscopetag
"set csprg=/usr/bin/cscope
"set csto=0
"set nocst
"set nocsverb
"set cscopeverbose

"if filereadable("cscope.out")
"	cscope add cscope.out	"	add from plugins/cscope_maps.vim
"else
"	if $ANDROID_BUILD_TOP !=""
		"This assumes you have sourced the Android build environment
"		cscope add $ANDROID_BUILD_TOP/cscope.out
"	else
		"Or, you can point to your android source directory in $ANDROID_DIR
"		cscope add $ANDROID_DIR/cscope.out
"	endif
"endif
"set csverb

"	delimitMate
let delimitMate_expand_inside_quotes = 1
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" UltiSnips
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<C-n>"
let g:UltiSnipsJumpBackwardTrigger="<C-p>"
"let g:UltiSnipsSnippetDirectories = ['UltiSnips']

"let g:UltiSnipsListSnippets="<s-tab>"

"let g:UltiSnipsExpandTrigger="<c-i>"	"Do NOT Use This. 'tab' input is not working.
"let g:UltiSnipsJumpForwardTrigger="<C-j>"
"let g:UltiSnipsJumpBackwardTrigger="<C-k>"
nnoremap <silent> ,ff :UltiSnipsEdit<CR>

" Deoplete.
"let g:deoplete#enable_at_startup = 1

"	YCM
" Let clangd fully control code completion
"let g:ycm_clangd_uses_ycmd_caching = 0
" Use installed clangd, not YCM-bundled clangd which doesn't get updates.
"let g:ycm_clangd_binary_path = exepath("clangd")

let g:ycm_server_python_interpreter = '/usr/bin/python3'
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0

"let g:ycm_collect_identifiers_from_comments_and_strings = 1
"let g:ycm_complete_in_strings = 1
"let g:ycm_complete_in_comments = 1
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_filetype_blacklist = {}
"
set completeopt-=preview	"Disable Preview Window

"To avoid conflict snippets
"let g:ycm_use_ultisnips_completer = 0
"let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_key_list_select_completion = ['', '']
let g:ycm_key_list_previous_completion = ['', '']
let g:ycm_seed_identifiers_with_syntax = 1
""let g:ycm_autoclose_preview_window_after_completion = 1
""let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_key_invoke_completion = '<C-c>'	" C-Space for trigger
let g:ycm_auto_trigger = 0	" C-Space for trigger
let g:ycm_show_diagnostics_ui = 0	" Disable YCM's Syntax check

"nnoremap <leader>g :YcmCompleter GoTo<CR>
"nnoremap <leader>gg :YcmCompleter GoToImprecise<CR>
"nnoremap <leader>d :YcmCompleter GoToDeclaration<CR>
"nnoremap <leader>t :YcmCompleter GetType<CR>
"nnoremap <leader>p :YcmCompleter GetParent<CR>

if filereadable("Makefile")
	let g:arm_prefix = system( 'grep arm- Makefile' )
endif

let g:ale_c_parse_makefile = 1
if exists( "g:arm_prefix" )
	if g:arm_prefix !=""
		let g:ale_c_gcc_executable = 'arm-none-eabi-gcc'
		let g:ale_cpp_gcc_executable = 'arm-none-eabi-gcc'
"let g:ale_c_gcc_options = '-std=c11 -Wall -I Core/Inc'
	endif
endif

let g:ale_linters = { 'c' : [ 'gcc' ], 'cpp' : [ 'gcc' ] }
let g:ale_fixers = {
			\'*' : [
			\	'remove_trailing_lines',
			\	'trim_whitespace'
			\]
			\}

" for vim-airline
let g:airline#extensions#tabline#enabled = 1 " turn on buffer list
let g:airline#extensions#whitespace#enabled = 1 " trailing whitespace and mixed indent
let g:airline#extensions#whitespace#mixed_indent_algo = 1 " trailing whitespace and mixed indent
let g:airline#extensions#tabline#formatter = 'default' "'unique_tail'
"AirlineTheme dark
"let g:airline_theme='dark'
let g:airline_theme='base16_chalk'
"let g:airline_theme='dracula'
let g:airline_solarized_bg='dark'
"set laststatus=2 " turn on bottom bar
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
"set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim/

" for MultipleSearch
let g:MultipleSearchMaxColors=11
let g:MultipleSearchColorSequence="darkcyan,gray,LightCyan,LightBlue,LightGreen,blue,green,magenta,cyan,gray,brown"
let g:MultipleSearchTextColorSequence="white,DarkRed,black,black,black,white,black,white,red,black,white"
"nmap ,H 0vv\*,<space>
nnoremap <silent> ,H :SearchReset <CR>
nnoremap <silent> ,h :SearchBuffers <C-R>=expand("<cword>")<CR><CR>
vnoremap <silent> ,h y:SearchBuffers <C-R>"<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable

"	vim-cpp-enhanced-highlighting
"Highlighting of class scope is disabled by default. To enable set
let g:cpp_class_scope_highlight = 1

"Highlighting of member variables is disabled by default. To enable set
let g:cpp_member_variable_highlight = 1

"Highlighting of class names in declarations is disabled by default. To enable set
let g:cpp_class_decl_highlight = 1

"There are two ways to highlight template functions. Either
"let g:cpp_experimental_simple_template_highlight = 1

"which works in most cases, but can be a little slow on large files. Alternatively set
"let g:cpp_experimental_template_highlight = 1
"which is a faster implementation but has some corner cases where it doesn't work.
"Note: C++ template syntax is notoriously difficult to parse, so don't expect this feature to be perfect.

"Highlighting of library concepts is enabled by
"let g:cpp_concepts_highlight = 1
"This will highlight the keywords concept and requires as well as all named requirements (like DefaultConstructible) in the standard library.

"Highlighting of user defined functions can be disabled by
"let g:cpp_no_function_highlight = 1

let c_no_curly_error=1

"	Macro Function by jyhuh
"	Paste this code to ~/.vim/bundle/vim-cpp-enhanced.../syntax/c.vim
"syn match cOperator	"[.!~*&%<>^|=,+-]"
"syn match       cMacro           display "\<\u[[:upper:][:digit:]_]*\s*("me=e-1
"hi def link cMacro		Macro

"	Comment Highlighting"
"syn keyword cTodo		contained NOTE INFO DEBUG ERROR FATAL
"
"	Comment Highlighting"	Do Not Use This...
"if has("autocmd")
"    if v:version > 701
"        autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\)')
"        autocmd Syntax * call matchadd('Search', '\W\zs\(HELP\|DEBUG\)')
"        autocmd Syntax * call matchadd('ErrorMsg', '\W\zs\(ERROR\|FATAL\)')
"    endif
"endif

"hi def link cppSTLnamespace		cppStatement
"hi def link cppSTLtype			cppType
hi cppAccess					guifg=Red ctermfg=Red


"Plugin Indent-Guides
"let g:indent_guides_enable_on_vim_startup = 1
"let g:indent_guides_start_level = 2
"let g:indent_guides_guide_size = 1

" Termdebug
" :packadd termdebug
" :TermDebug
let g:termdebug_wide = 163
"let g:termdebugger = "arm-none-eabi-gdb"

" Colorscheme and Highlighting =======================================
colorscheme solarized
"colorscheme PaperColor

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
let g:solarized_termcolors=256
"let g:solarized_termcolors=16
"let g:solarized_termtrans=1
"let g:solarized_degrade=1
"let g:solarized_bold=0
"let g:solarized_contrast="high"
"let g:solarized_visibility="high"

set background=dark
set cursorline
set cursorcolumn
"	set textwidth and 'gg' 'gqG'
"set textwidth=80
"set formatoptions+=w

" Highlight
hi Normal ctermbg=none guibg=black
hi Visual cterm=none ctermfg=none ctermbg=17
"hi LineNr ctermfg=235 ctermbg=black guifg=#303030 guibg=black

" ALE Sign Column
highlight SignColumn ctermbg=233
highlight LineNr ctermbg=233

" Cursor Line and Column
highlight Cursor guibg=Red guifg=Black ctermbg=Red ctermfg=Black
highlight CursorIM guibg=Blue guifg=NONE ctermbg=Blue ctermfg=NONE

"autocmd InsertEnter * hi CursorLine term=none cterm=none ctermbg=17 guibg=#000060
"autocmd InsertEnter * hi CursorColumn term=none cterm=none ctermbg=232 guibg=#000060
"autocmd InsertLeave * hi CursorLine term=none cterm=none ctermbg=233 guibg=#303030
"autocmd InsertLeave * hi CursorColumn term=none cterm=none ctermbg=232 guibg=#303030
"autocmd VimEnter * hi CursorLine term=none cterm=none ctermbg=233 guibg=#303030
"autocmd VimEnter * hi CursorColumn term=none cterm=none ctermbg=232 guibg=#303030

" Special Color Highlighting
" Trailing White-spaces....
highlight TrailingWhiteSpace guibg=#505050 ctermbg=DarkGray
match TrailingWhiteSpace /\s\+$/
autocmd InsertEnter * match TrailingWhiteSpace /\s\+\%#\@<!$/
autocmd InsertLeave * match TrailingWhiteSpace /\s\+$/
autocmd WinEnter * match TrailingWhiteSpace /\s\+$/

"set colorcolumn=81
"hi ColorColumn ctermbg=52 guibg=DarkRed
"syn match ColorColumn /\%81v.\*/

"	Indent line tab
set listchars=tab:\|\ ",trail:\  "
set list
hi SpecialKey ctermfg=234 ctermbg=black guibg=bg
