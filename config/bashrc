# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

echo "START .bashrc"

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
#HISTCONTROL=ignoredups:erasedups
HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=3000
HISTFILESIZE=${HISTSIZE}
HISTIGNORE='&:ls:ll:la:cd:exit:clear:history:fg:man'

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

if [ -z "$GREP_OPTIONS" ]; then
	for PATTERN in .cvs .git .svn .hg;
	do
		GREP_OPTIONS+="--exclude-dir=$PATTERN "
	done
	for PATTERN in tags cscope*;
	do
		GREP_OPTIONS+="--exclude=$PATTERN "
		AG_OPTIONS+="--ignore \\\"$PATTERN\\\" "
	done

	GREP_OPTIONS+='--binary-files=without-match '
	#export GREP_OPTIONS+='--binary-files=without-match'
	#export GREP_COLOR='1:32'
else
	echo "GREP_OPTIONS has been defined... $GREP_OPTIONS"
fi

alias grep="grep --color=auto $GREP_OPTIONS"
alias fgrep="fgrep --color=auto $GREP_OPTIONS"
alias egrep="egrep --color=auto $GREP_OPTIONS"
echo "GREP_OPTIONS: $GREP_OPTIONS"
## Summary for args to less:
# less(1)
#   -M (-M or --LONG-PROMPT) Prompt very verbosely
#   -I (-I or --IGNORE-CASE) Searches with '/' ignore case
#   -R (-R or --RAW-CONTROL-CHARS) For handling ANSI colors
#   -F (-F or --quit-if-one-screen) Auto exit if <1 screen
#   -X (-X or --no-init) Disable termcap init & deinit
alias ag="ag --smart-case --pager=\"less -MIRFX\" ${AG_OPTIONS}"
unset GREP_OPTIONS AG_OPTIONS

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# set PATH so it includes user's private bin if it exists
#if [ -d "$HOME/bin" ] ; then
#    PATH="$HOME/bin:$PATH"
#fi
#if [ -d "$HOME/usr/bin" ] ; then
#    PATH="$HOME/usr/bin:$PATH"
#fi
#
#if [ -d "/usr/lib/ccache" ] ; then
#    PATH="/usr/lib/ccache:$PATH"
#fi

parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

PS1="${debian_chroot:+($debian_chroot)}\[\033[01;33m\]\u\[\033[00m\]@\[\033[00;32m\]\h\[\033[00m\]:\[\033[00;36m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\]\n$ "

alias gitdiff="git difftool --dir-diff"
#alias gitdiff="git difftool --dir-diff --no-symlinks"

#alias diff='colordiff -u'
alias diff='colordiff'
alias minicom='minicom --color=on'

stty -ixon

if [ ! -z "$TERMCAP" ] && [ "$TERM" == "screen" ] ; then
	export TERMCAP=$(echo $TERMCAP | sed -e 's/Co#8/Co#256/g')
fi

#	Hangul input( C-space ) for Xming
FCITX_ENABLE=`ps -aux | grep fcitx | grep -v grep | wc -l`
if [ "$FCITX_ENABLE" == "0" ] ; then
	#export XMODIFIERS=@im=fcitx
	#fcitx 2> /dev/null		#	disable STDERR Output
	echo "Start FCITX."
else
	echo "FCITX is Running."
fi
unset FCITX_ENABLE

#	common aliases
#	ack
#alias ack="ack --nogroup --column"
alias ack="ack --nogroup --column --ignore-file=match:tags --ignore-file=match:cscope*"
alias ack-grep="ack-grep --nogroup --column --ignore-file=match:tags --ignore-file=match:cscope*"
#alias ack="ack-grep"
#sudo dpkg-divert --local --divert /usr/bin/ack --rename --add /usr/bin/ack-grep
alias repo-sync="time repo sync --force-sync -j$(nproc)"
alias repo-remote="repo forall -c \"git remote -v\""
alias repo-status="repo forall -c \"git remote -v && git status\""
alias repo-branch="repo forall -c \"git remote -v && git branch -avv\""
alias repo-clean="repo forall -c \"time git reset --hard && time git clean -fdx\" -j$(nproc)"

# docker
alias docker-m3="docker run -it --rm --init -e HOST_UID=$(id -u) -e HOST_GID=$(id -g) -v $HOME:/home/mbrain -v /tmp:/tmp -h m3-docker --name m3-docker m3"
alias docker-exec="docker exec -it"

#	history for other terminals.
#export PROMPT_COMMAND="history -n;history -w;history -c;history -r;"
export PROMPT_COMMAND="history -a;history -c;history -r; $PROMPT_COMMAND"

ENABLE_POWERLINE=0
if [ "$TTY_TYPE" == "tty" ] || [ ! -z "$IS_DOCKER" ] ; then
	ENABLE_POWERLINE=0
fi

#if [ -f "`which powerline-daemon`" ] ; then
if [ "$ENABLE_POWERLINE" != "0" ] ; then
	echo "RUN powerline"
	powerline-daemon -q
	POWERLINE_BASH_CONTINUATION=1
	POWERLINE_BASH_SELECT=1
	. /usr/share/powerline/bindings/bash/powerline.sh
	#. /usr/local/lib/python2.7/dist-packages/powerline/bindings/bash/powerline.sh
	#. /usr/share/powerline/bindings/shell/powerline.sh
fi

WSL=`uname -v | grep Microsoft`
echo "WSL: $WSL"
if [ ! -z "$WSL" ] ; then
	export DISPLAY="localhost:0"
	#export GDK_SCALE=2
fi
unset WSL

LANG="en_US.UTF-8"
LANGUAGE="en_US:en"
LC_ALL=$LANG

# git commit using GPG key. 2020-02-05 17:27:58
export GPG_TTY=$(tty)
``
if [[ ! -z "$IM_CONFIG_PHASE" ]] ; then
	QT_IM_MODULE=$GTK_IM_MODULE
	QT4_IM_MODULE=$GTK_IM_MODULE
	CLUTTER_IM_MODULE=$GTK_IM_MODULE
fi

export USE_CCACHE=1
export CCACHE_BASEDIR="$HOME"
export CCACHE_TEMPDIR="/tmp"
if [[ -d "/opt/nvme" ]] ; then
	export CCACHE_DIR="/opt/nvme/ccache"
	export OUT_DIR_COMMON_BASE="/opt/nvme/out"
fi

set -o vi

# 31 – red
# 32 – green
# 33 – yellow
# 0 – reset/normal
# 1 – bold
# 4 – underlined
LESS_COLOR=1
if [[ ! -z ${LESS_COLOR} ]] ; then
	export LESS_TERMCAP_mb=$'\e[1;32m'
	export LESS_TERMCAP_md=$'\e[1;32m'
	export LESS_TERMCAP_me=$'\e[0m'
	export LESS_TERMCAP_se=$'\e[0m'
	export LESS_TERMCAP_so=$'\e[01;33m'
	export LESS_TERMCAP_ue=$'\e[0m'
	export LESS_TERMCAP_us=$'\e[1;4;31m'
fi
unset LESS_COLOR

#if [[ ! -z $(which most) ]] ; then
#	export PAGER=most
#fi

echo "END .bashrc"

# mount overlayfs excample
#sudo mount -t overlay overlay -o lowerdir=./lower,upperdir=./out/upper,workdir=./out/work ./out/merged
